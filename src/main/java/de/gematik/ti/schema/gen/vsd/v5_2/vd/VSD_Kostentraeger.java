/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.vsd.v5_2.vd;

import de.gematik.ti.schema.gen.vsd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class VSD_Kostentraeger  extends VSD_KostentraegerType {
    
    // attributes:
    
    // elements:
    /*@isSingleAndOptionalValue*/
    
    public VSD_KostentraegerType AbrechnenderKostentraeger;
    
    // default Constructor
    public VSD_Kostentraeger() {
        super();
        
        this.AbrechnenderKostentraeger = null;
        
    }
    
    // copy Constructor
    public VSD_Kostentraeger(VSD_Kostentraeger _VSD_Kostentraeger) {
        super(_VSD_Kostentraeger);
        
        this.AbrechnenderKostentraeger = _VSD_Kostentraeger.AbrechnenderKostentraeger;
    }
    
    // Constructor from superclass
    public VSD_Kostentraeger(VSD_KostentraegerType _VSD_KostentraegerType) {
        super(_VSD_KostentraegerType);
        
        this.AbrechnenderKostentraeger = null;
        
    }
    
    // TODO correct deserializing of properties of parent element
    public static VSD_Kostentraeger deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        VSD_Kostentraeger _VSD_Kostentraeger = new VSD_Kostentraeger(VSD_KostentraegerType.deserialize(node));
        
        NodeList nodeListAbrechnenderKostentraeger = element.getElementsByTagNameNS(VSD_KostentraegerType.NAMESPACE_URI ,"AbrechnenderKostentraeger");
        Node nodeAbrechnenderKostentraeger = nodeListAbrechnenderKostentraeger.item(0);
        _VSD_Kostentraeger.AbrechnenderKostentraeger = VSD_KostentraegerType.deserialize(nodeAbrechnenderKostentraeger);
        
        return _VSD_Kostentraeger;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<VSD_Kostentraeger>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    @Override
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        for (Map.Entry<String, Object> entry : super.getElements().entrySet()) {
            elemArray.put(entry.getKey(), entry.getValue());
        }
        
        elemArray.put("AbrechnenderKostentraeger", this.AbrechnenderKostentraeger);
        
        return elemArray;
    }
}

