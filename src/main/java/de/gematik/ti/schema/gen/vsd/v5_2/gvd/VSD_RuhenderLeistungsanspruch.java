/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.vsd.v5_2.gvd;

import de.gematik.ti.schema.gen.vsd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class VSD_RuhenderLeistungsanspruch  {
    
    public static final String NAMESPACE_PREFIX = "VSD";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/vsdm/vsd/v5.2";
    
    // attributes:
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Beginn;
    
    /*@isSingleAndOptionalValue*/
    
    public String Ende;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public IntegerWrapper ArtDesRuhens;
    
    // default Constructor
    public VSD_RuhenderLeistungsanspruch() {
        
        this.Beginn = new String();
        
        this.Ende = null;
        
        this.ArtDesRuhens = new IntegerWrapper();
        
    }
    
    // copy Constructor
    public VSD_RuhenderLeistungsanspruch(VSD_RuhenderLeistungsanspruch _VSD_RuhenderLeistungsanspruch) {
        
        this.Beginn = _VSD_RuhenderLeistungsanspruch.Beginn;
        this.Ende = _VSD_RuhenderLeistungsanspruch.Ende;
        this.ArtDesRuhens = _VSD_RuhenderLeistungsanspruch.ArtDesRuhens;
    }
    
    public static VSD_RuhenderLeistungsanspruch deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        VSD_RuhenderLeistungsanspruch _VSD_RuhenderLeistungsanspruch = new VSD_RuhenderLeistungsanspruch();
        
        NodeList nodeListBeginn = element.getElementsByTagNameNS(VSD_RuhenderLeistungsanspruch.NAMESPACE_URI ,"Beginn");
        
        if (nodeListBeginn.getLength() == 0) {
            _VSD_RuhenderLeistungsanspruch.Beginn = null;
        } else {
            _VSD_RuhenderLeistungsanspruch.Beginn = String.valueOf(((Element) nodeListBeginn.item(0)).getTextContent());
        }
        
        NodeList nodeListEnde = element.getElementsByTagNameNS(VSD_RuhenderLeistungsanspruch.NAMESPACE_URI ,"Ende");
        
        if (nodeListEnde.getLength() == 0) {
            _VSD_RuhenderLeistungsanspruch.Ende = null;
        } else {
            _VSD_RuhenderLeistungsanspruch.Ende = String.valueOf(((Element) nodeListEnde.item(0)).getTextContent());
        }
        
        NodeList nodeListArtDesRuhens = element.getElementsByTagNameNS(VSD_RuhenderLeistungsanspruch.NAMESPACE_URI ,"ArtDesRuhens");
        
        if (nodeListArtDesRuhens.getLength() == 0) {
            _VSD_RuhenderLeistungsanspruch.ArtDesRuhens = null;
        } else {
            _VSD_RuhenderLeistungsanspruch.ArtDesRuhens = IntegerWrapper.valueOf(((Element) nodeListArtDesRuhens.item(0)).getTextContent());
        }
        
        return _VSD_RuhenderLeistungsanspruch;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<VSD_RuhenderLeistungsanspruch>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("Beginn", this.Beginn);
        elemArray.put("Ende", this.Ende);
        elemArray.put("ArtDesRuhens", this.ArtDesRuhens);
        
        return elemArray;
    }
}

