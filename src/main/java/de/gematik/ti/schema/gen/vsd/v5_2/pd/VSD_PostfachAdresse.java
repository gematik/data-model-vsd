/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.vsd.v5_2.pd;

import de.gematik.ti.schema.gen.vsd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class VSD_PostfachAdresse  {
    
    public static final String NAMESPACE_PREFIX = "VSD";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/vsdm/vsd/v5.2";
    
    // attributes:
    
    // elements:
    /*@isSingleAndOptionalValue*/
    
    public String Postleitzahl;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Ort;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Postfach;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public VSD_LandTypeType Land;
    
    // default Constructor
    public VSD_PostfachAdresse() {
        
        this.Postleitzahl = null;
        
        this.Ort = new String();
        
        this.Postfach = new String();
        
        this.Land = new VSD_LandTypeType();
        
    }
    
    // copy Constructor
    public VSD_PostfachAdresse(VSD_PostfachAdresse _VSD_PostfachAdresse) {
        
        this.Postleitzahl = _VSD_PostfachAdresse.Postleitzahl;
        this.Ort = _VSD_PostfachAdresse.Ort;
        this.Postfach = _VSD_PostfachAdresse.Postfach;
        this.Land = _VSD_PostfachAdresse.Land;
    }
    
    public static VSD_PostfachAdresse deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        VSD_PostfachAdresse _VSD_PostfachAdresse = new VSD_PostfachAdresse();
        
        NodeList nodeListPostleitzahl = element.getElementsByTagNameNS(VSD_PostfachAdresse.NAMESPACE_URI ,"Postleitzahl");
        
        if (nodeListPostleitzahl.getLength() == 0) {
            _VSD_PostfachAdresse.Postleitzahl = null;
        } else {
            _VSD_PostfachAdresse.Postleitzahl = String.valueOf(((Element) nodeListPostleitzahl.item(0)).getTextContent());
        }
        
        NodeList nodeListOrt = element.getElementsByTagNameNS(VSD_PostfachAdresse.NAMESPACE_URI ,"Ort");
        
        if (nodeListOrt.getLength() == 0) {
            _VSD_PostfachAdresse.Ort = null;
        } else {
            _VSD_PostfachAdresse.Ort = String.valueOf(((Element) nodeListOrt.item(0)).getTextContent());
        }
        
        NodeList nodeListPostfach = element.getElementsByTagNameNS(VSD_PostfachAdresse.NAMESPACE_URI ,"Postfach");
        
        if (nodeListPostfach.getLength() == 0) {
            _VSD_PostfachAdresse.Postfach = null;
        } else {
            _VSD_PostfachAdresse.Postfach = String.valueOf(((Element) nodeListPostfach.item(0)).getTextContent());
        }
        
        NodeList nodeListLand = element.getElementsByTagNameNS(VSD_LandTypeType.NAMESPACE_URI ,"Land");
        Node nodeLand = nodeListLand.item(0);
        _VSD_PostfachAdresse.Land = VSD_LandTypeType.deserialize(nodeLand);
        
        return _VSD_PostfachAdresse;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<VSD_PostfachAdresse>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("Postleitzahl", this.Postleitzahl);
        elemArray.put("Ort", this.Ort);
        elemArray.put("Postfach", this.Postfach);
        elemArray.put("Land", this.Land);
        
        return elemArray;
    }
}

