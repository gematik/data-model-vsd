/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.vsd.v5_2.pd;

import de.gematik.ti.schema.gen.vsd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class VSD_Person  {
    
    public static final String NAMESPACE_PREFIX = "VSD";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/vsdm/vsd/v5.2";
    
    // attributes:
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Geburtsdatum;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Vorname;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Nachname;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String Geschlecht;
    
    /*@isSingleAndOptionalValue*/
    
    public String Vorsatzwort;
    
    /*@isSingleAndOptionalValue*/
    
    public String Namenszusatz;
    
    /*@isSingleAndOptionalValue*/
    
    public String Titel;
    
    /*@isSingleAndOptionalValue*/
    
    public VSD_PostfachAdresse PostfachAdresse;
    
    /*@isSingleAndOptionalValue*/
    
    public VSD_StrassenAdresse StrassenAdresse;
    
    // default Constructor
    public VSD_Person() {
        
        this.Geburtsdatum = new String();
        
        this.Vorname = new String();
        
        this.Nachname = new String();
        
        this.Geschlecht = new String();
        
        this.Vorsatzwort = null;
        
        this.Namenszusatz = null;
        
        this.Titel = null;
        
        this.PostfachAdresse = null;
        
        this.StrassenAdresse = null;
        
    }
    
    // copy Constructor
    public VSD_Person(VSD_Person _VSD_Person) {
        
        this.Geburtsdatum = _VSD_Person.Geburtsdatum;
        this.Vorname = _VSD_Person.Vorname;
        this.Nachname = _VSD_Person.Nachname;
        this.Geschlecht = _VSD_Person.Geschlecht;
        this.Vorsatzwort = _VSD_Person.Vorsatzwort;
        this.Namenszusatz = _VSD_Person.Namenszusatz;
        this.Titel = _VSD_Person.Titel;
        this.PostfachAdresse = _VSD_Person.PostfachAdresse;
        this.StrassenAdresse = _VSD_Person.StrassenAdresse;
    }
    
    public static VSD_Person deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        VSD_Person _VSD_Person = new VSD_Person();
        
        NodeList nodeListGeburtsdatum = element.getElementsByTagNameNS(VSD_Person.NAMESPACE_URI ,"Geburtsdatum");
        
        if (nodeListGeburtsdatum.getLength() == 0) {
            _VSD_Person.Geburtsdatum = null;
        } else {
            _VSD_Person.Geburtsdatum = String.valueOf(((Element) nodeListGeburtsdatum.item(0)).getTextContent());
        }
        
        NodeList nodeListVorname = element.getElementsByTagNameNS(VSD_Person.NAMESPACE_URI ,"Vorname");
        
        if (nodeListVorname.getLength() == 0) {
            _VSD_Person.Vorname = null;
        } else {
            _VSD_Person.Vorname = String.valueOf(((Element) nodeListVorname.item(0)).getTextContent());
        }
        
        NodeList nodeListNachname = element.getElementsByTagNameNS(VSD_Person.NAMESPACE_URI ,"Nachname");
        
        if (nodeListNachname.getLength() == 0) {
            _VSD_Person.Nachname = null;
        } else {
            _VSD_Person.Nachname = String.valueOf(((Element) nodeListNachname.item(0)).getTextContent());
        }
        
        NodeList nodeListGeschlecht = element.getElementsByTagNameNS(VSD_Person.NAMESPACE_URI ,"Geschlecht");
        
        if (nodeListGeschlecht.getLength() == 0) {
            _VSD_Person.Geschlecht = null;
        } else {
            _VSD_Person.Geschlecht = String.valueOf(((Element) nodeListGeschlecht.item(0)).getTextContent());
        }
        
        NodeList nodeListVorsatzwort = element.getElementsByTagNameNS(VSD_Person.NAMESPACE_URI ,"Vorsatzwort");
        
        if (nodeListVorsatzwort.getLength() == 0) {
            _VSD_Person.Vorsatzwort = null;
        } else {
            _VSD_Person.Vorsatzwort = String.valueOf(((Element) nodeListVorsatzwort.item(0)).getTextContent());
        }
        
        NodeList nodeListNamenszusatz = element.getElementsByTagNameNS(VSD_Person.NAMESPACE_URI ,"Namenszusatz");
        
        if (nodeListNamenszusatz.getLength() == 0) {
            _VSD_Person.Namenszusatz = null;
        } else {
            _VSD_Person.Namenszusatz = String.valueOf(((Element) nodeListNamenszusatz.item(0)).getTextContent());
        }
        
        NodeList nodeListTitel = element.getElementsByTagNameNS(VSD_Person.NAMESPACE_URI ,"Titel");
        
        if (nodeListTitel.getLength() == 0) {
            _VSD_Person.Titel = null;
        } else {
            _VSD_Person.Titel = String.valueOf(((Element) nodeListTitel.item(0)).getTextContent());
        }
        
        NodeList nodeListPostfachAdresse = element.getElementsByTagNameNS(VSD_PostfachAdresse.NAMESPACE_URI ,"PostfachAdresse");
        Node nodePostfachAdresse = nodeListPostfachAdresse.item(0);
        _VSD_Person.PostfachAdresse = VSD_PostfachAdresse.deserialize(nodePostfachAdresse);
        
        NodeList nodeListStrassenAdresse = element.getElementsByTagNameNS(VSD_StrassenAdresse.NAMESPACE_URI ,"StrassenAdresse");
        Node nodeStrassenAdresse = nodeListStrassenAdresse.item(0);
        _VSD_Person.StrassenAdresse = VSD_StrassenAdresse.deserialize(nodeStrassenAdresse);
        
        return _VSD_Person;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<VSD_Person>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("Geburtsdatum", this.Geburtsdatum);
        elemArray.put("Vorname", this.Vorname);
        elemArray.put("Nachname", this.Nachname);
        elemArray.put("Geschlecht", this.Geschlecht);
        elemArray.put("Vorsatzwort", this.Vorsatzwort);
        elemArray.put("Namenszusatz", this.Namenszusatz);
        elemArray.put("Titel", this.Titel);
        elemArray.put("PostfachAdresse", this.PostfachAdresse);
        elemArray.put("StrassenAdresse", this.StrassenAdresse);
        
        return elemArray;
    }
}

