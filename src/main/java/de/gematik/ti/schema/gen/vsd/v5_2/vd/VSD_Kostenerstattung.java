/*
* Copyright (c) 2020 gematik GmbH
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*    http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

//
//  This is a generated file, do not edit.
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//
package de.gematik.ti.schema.gen.vsd.v5_2.vd;

import de.gematik.ti.schema.gen.vsd.utils.*;

import java.util.*;
import org.w3c.dom.*;

/** Generated Java class */
public class VSD_Kostenerstattung  {
    
    public static final String NAMESPACE_PREFIX = "VSD";
    public static final String NAMESPACE_URI = "http://ws.gematik.de/fa/vsdm/vsd/v5.2";
    
    // attributes:
    
    // elements:
    /*@isNotSingleOrNotOptionalValue*/
    
    public String AerztlicheVersorgung;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String ZahnaerztlicheVersorgung;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String StationaererBereich;
    
    /*@isNotSingleOrNotOptionalValue*/
    
    public String VeranlassteLeistungen;
    
    // default Constructor
    public VSD_Kostenerstattung() {
        
        this.AerztlicheVersorgung = new String();
        
        this.ZahnaerztlicheVersorgung = new String();
        
        this.StationaererBereich = new String();
        
        this.VeranlassteLeistungen = new String();
        
    }
    
    // copy Constructor
    public VSD_Kostenerstattung(VSD_Kostenerstattung _VSD_Kostenerstattung) {
        
        this.AerztlicheVersorgung = _VSD_Kostenerstattung.AerztlicheVersorgung;
        this.ZahnaerztlicheVersorgung = _VSD_Kostenerstattung.ZahnaerztlicheVersorgung;
        this.StationaererBereich = _VSD_Kostenerstattung.StationaererBereich;
        this.VeranlassteLeistungen = _VSD_Kostenerstattung.VeranlassteLeistungen;
    }
    
    public static VSD_Kostenerstattung deserialize(Node node) {
        if (node == null) {
            return null;
        }
        Element element = (Element) node;
        
        VSD_Kostenerstattung _VSD_Kostenerstattung = new VSD_Kostenerstattung();
        
        NodeList nodeListAerztlicheVersorgung = element.getElementsByTagNameNS(VSD_Kostenerstattung.NAMESPACE_URI ,"AerztlicheVersorgung");
        
        if (nodeListAerztlicheVersorgung.getLength() == 0) {
            _VSD_Kostenerstattung.AerztlicheVersorgung = null;
        } else {
            _VSD_Kostenerstattung.AerztlicheVersorgung = String.valueOf(((Element) nodeListAerztlicheVersorgung.item(0)).getTextContent());
        }
        
        NodeList nodeListZahnaerztlicheVersorgung = element.getElementsByTagNameNS(VSD_Kostenerstattung.NAMESPACE_URI ,"ZahnaerztlicheVersorgung");
        
        if (nodeListZahnaerztlicheVersorgung.getLength() == 0) {
            _VSD_Kostenerstattung.ZahnaerztlicheVersorgung = null;
        } else {
            _VSD_Kostenerstattung.ZahnaerztlicheVersorgung = String.valueOf(((Element) nodeListZahnaerztlicheVersorgung.item(0)).getTextContent());
        }
        
        NodeList nodeListStationaererBereich = element.getElementsByTagNameNS(VSD_Kostenerstattung.NAMESPACE_URI ,"StationaererBereich");
        
        if (nodeListStationaererBereich.getLength() == 0) {
            _VSD_Kostenerstattung.StationaererBereich = null;
        } else {
            _VSD_Kostenerstattung.StationaererBereich = String.valueOf(((Element) nodeListStationaererBereich.item(0)).getTextContent());
        }
        
        NodeList nodeListVeranlassteLeistungen = element.getElementsByTagNameNS(VSD_Kostenerstattung.NAMESPACE_URI ,"VeranlassteLeistungen");
        
        if (nodeListVeranlassteLeistungen.getLength() == 0) {
            _VSD_Kostenerstattung.VeranlassteLeistungen = null;
        } else {
            _VSD_Kostenerstattung.VeranlassteLeistungen = String.valueOf(((Element) nodeListVeranlassteLeistungen.item(0)).getTextContent());
        }
        
        return _VSD_Kostenerstattung;
    }
    
    public static List deserializeToList(List<Node> nodeList) {
        List result = new ArrayList<VSD_Kostenerstattung>();
        for( Node node : nodeList) {
            result.add(deserialize(node));
        }
        return result;
    }
    
    /**
    * Returns a map of attributes
    */
    public Map<String, Object> getAttributes() {
        HashMap<String, Object> attributesDict = new HashMap<>();
        
        return attributesDict;
    }
    
    /**
    * Returns a LinkedHashMap of the elements. LinkedHashMap is used as a workaround to provide the needed
    * functionality of a ordered array of tuples.
    */
    public LinkedHashMap<String, Object> getElements() {
        LinkedHashMap<String, Object> elemArray = new LinkedHashMap<>();
        
        elemArray.put("AerztlicheVersorgung", this.AerztlicheVersorgung);
        elemArray.put("ZahnaerztlicheVersorgung", this.ZahnaerztlicheVersorgung);
        elemArray.put("StationaererBereich", this.StationaererBereich);
        elemArray.put("VeranlassteLeistungen", this.VeranlassteLeistungen);
        
        return elemArray;
    }
}

